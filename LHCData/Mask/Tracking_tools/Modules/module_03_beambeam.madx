print, text="";
print, text="";
print, text="+++++++++++++++++++++++++++++++";
print, text="++ START MODULE 3: BEAM-BEAM ++";
print, text="+++++++++++++++++++++++++++++++";
print, text="";
print, text="";


print, text="Entering beam-beam block";

on_bb_switch = par_on_bb_switch;
b_t_dist = par_b_t_dist; 

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!     Beam-beam encounters installation
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;



n_insideD1 = par_n_inside_D1; 

nho_IR1 = par_nho_IR1;
nho_IR2 = par_nho_IR2;
nho_IR5 = par_nho_IR5;
nho_IR8 = par_nho_IR8;

call, file="beambeam_macros/macro_bb.madx";                  ! macros for beam-beam

if( on_bb_switch == 1 || par_on_compute_train_input==1){
     exec, DEFINE_BB_PARAM;  !Define main beam-beam parameters
};

on_disp=0; !more precise angles at IPs

if( ON_BB_SWITCH == 1){
  !Install b-b marker
  exec, INSTALL_BB_MARK(b1);
  exec, INSTALL_BB_MARK(b2);

  !Define bb lenses for both beams in all IR's and calculate # of encounters before D1
  exec, CALCULATE_BB_LENS;

  !Install bb lenses
  on_ho1 =1; on_lr1l = 1; on_lr1r = 1; npara_1 = npara0_1 + n_insideD1;
  on_ho5 =1; on_lr5l = 1; on_lr5r = 1; npara_5 = npara0_5 + n_insideD1;
  on_ho2 =1; on_lr2l = 1; on_lr2r = 1; npara_2 = npara0_2 + n_insideD1;
  on_ho8 =1; on_lr8l = 1; on_lr8r = 1; npara_8 = npara0_8 + n_insideD1;
  if(mylhcbeam==1) {exec, INSTALL_BB_LENS(b1);};
  if(mylhcbeam>1) {exec, INSTALL_BB_LENS(b2);};

  !Print the lenses in bb_lenses.dat
  exec, PRINT_BB_LENSES;

  ON_BB_CHARGE := 0; !Switch off the charge the bb lenses

  ! Removed installation of crabs from this module
  ! !Install Crab Cavities for the weak beam
  ! if (par_install_crabcavities==1){
  !    call, file="tools/enable_crabcavities.madx";
  ! }

  if (mylhcbeam<3){
    use, sequence=lhcb1;
    select,flag=twiss,clear;
    select,flag=twiss,class=marker,pattern=PAR.*L1,range=mbxf.4l1..4/IP1.L1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
    select,flag=twiss,class=marker,pattern=PAR.*L5,range=mbxf.4l5..4/IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
    select,flag=twiss,class=marker,pattern=PAR.*R1,range=IP1/mbxf.4r1..1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
    select,flag=twiss,class=marker,pattern=PAR.*R5,range=IP5/mbxf.4r5..1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
    select,flag=twiss,class=marker,pattern=IP1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
    select,flag=twiss,class=marker,pattern=IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
    twiss,file=twiss_bb.b1;system,"cat twiss_bb.b1";
  };

  use, sequence=lhcb2;
  select,flag=twiss,clear;
  select,flag=twiss,class=marker,pattern=PAR.*L1,range=mbxf.4l1..4/IP1.L1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  select,flag=twiss,class=marker,pattern=PAR.*L5,range=mbxf.4l5..4/IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  select,flag=twiss,class=marker,pattern=PAR.*R1,range=IP1/mbxf.4r1..1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  select,flag=twiss,class=marker,pattern=PAR.*R5,range=IP5/mbxf.4r5..1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  select,flag=twiss,class=marker,pattern=IP1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  select,flag=twiss,class=marker,pattern=IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  twiss,file=twiss_bb.b2;system,"cat twiss_bb.b2";

  if(mylhcbeam==1) {use, sequence=lhcb1;};
  if(mylhcbeam>1) {use, sequence=lhcb2;};

  select,flag=twiss,clear;
  select,flag=twiss,pattern=HO,class=beambeam,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
  twiss,file=twiss_bb;system,"cat twiss_bb";


  !Remove bb markers
	exec, REMOVE_BB_MARKER;

};

if (par_on_compute_train_input==1){
	! from Michi Hostettler
	
if (ON_BB_SWITCH==1){
		print, text='ERROR: if you need to compute the TRAIN input the ON_BB_SWITCH has to be 0.';
		stop;
	}
	
	exec, INSTALL_BB_MARK(b1);
	exec, INSTALL_BB_MARK(b2);
	
	use, sequence=lhcb2;
	seqedit,sequence=lhcb2;
	flatten;
	reflect;
	endedit;
  use, sequence=lhcb2;
	

  use, sequence=lhcb1;
  !kqtf=kqtf.b1;kqtd=kqtd.b1;kqtf.b1:=kqtf;kqtd.b1:=kqtd;
 	!ksf=ksf.b1;ksd=ksd.b1;ksf.b1:=ksf;ksd.b1:=ksd;

 	match;
 		global, q1=qx0, q2=qy0;
 		vary,   name=kqtf.b1, step=1.0E-7 ;
 		vary,   name=kqtd.b1, step=1.0E-7 ;
 		lmdif,  calls=100, tolerance=1.0E-21;
 	endmatch;

 	match;
 		global, dq1=qprime, dq2=qprime;
 		vary,   name=ksf.b1;
 		vary,   name=ksd.b1;
 		lmdif,  calls=100, tolerance=1.0E-21;
 	endmatch;

 	match;
 		global, dq1=qprime, dq2=qprime;
 		global, q1=qx0, q2=qy0;
 		vary,   name=ksf.b1;
 		vary,   name=ksd.b1;
 		vary,   name=kqtf.b1, step=1.0E-7 ;
 		vary,   name=kqtd.b1, step=1.0E-7 ;
 		lmdif,  calls=500, tolerance=1.0E-21;
 	endmatch;

	use, sequence=lhcb2;

	!kqtf=kqtf.b2;kqtd=kqtd.b2;kqtf.b2:=kqtf;kqtd.b2:=kqtd;
 	!ksf=ksf.b2;ksd=ksd.b2;ksf.b2:=ksf;ksd.b2:=ksd;

	match;
 		global, q1=qx0, q2=qy0;
 		vary,   name=kqtf.b2, step=1.0E-7 ;
 		vary,   name=kqtd.b2, step=1.0E-7 ;
 		lmdif,  calls=100, tolerance=1.0E-21;
 	endmatch;

 	match;
 		global, dq1=qprime, dq2=qprime;
 		vary,   name=ksf.b2;
 		vary,   name=ksd.b2;
 		lmdif,  calls=100, tolerance=1.0E-21;
 	endmatch;

 	match;
 		global, dq1=qprime, dq2=qprime;
 		global, q1=qx0, q2=qy0;
 		vary,   name=ksf.b2;
 		vary,   name=ksd.b2;
 		vary,   name=kqtf.b2, step=1.0E-7 ;
 		vary,   name=kqtd.b2, step=1.0E-7 ;
 		lmdif,  calls=500, tolerance=1.0E-21;
 	endmatch;


  select,flag=sectormap,clear;
  select,flag=sectormap,range=#e;
  select,flag=sectormap,class=marker,pattern=^BBMK_PAR.*;
  select,flag=sectormap,class=marker,pattern=^bbmk_ho.*_0;

  select,flag=twiss,clear;
  select,flag=twiss,class=marker,pattern=^ip.*,
       column=name,s,x,betx,alfx,dx,y,bety,alfy,dy;
  select,flag=twiss,class=marker,pattern=^BBMK_PAR.*,
       column=name,s,x,betx,alfx,dx,y,bety,alfy,dy;
  select,flag=twiss,class=marker,pattern=^bbmk_ho.*_0,
       column=name,s,x,betx,alfx,dx,y,bety,alfy,dy;

  select,flag=survey,clear;
  select,flag=survey,class=marker,pattern=^ip.*,
       column=name,x,y,z;
  select,flag=survey,class=marker,pattern=^BBMK_PAR.*,
       column=name,x,y,z;
  select,flag=survey,class=marker,pattern=^bbmk_ho.*_0,
       column=name,x,y,z;

  set, format="22.18e";

  use, sequence=lhcb1;
  twiss,sequence=lhcb1,sectormap,sectorfile=train.mapf,file=train.optf;
  survey,sequence=lhcb1,file=train.surf;

  use, sequence=lhcb2;
  twiss,sequence=lhcb2,sectormap,sectorfile=train.mapb,file=train.optb;
  survey,sequence=lhcb2,file=train.surb;

  system, "rm -rf train-output";
  system, "mkdir train-output";
  system, "cat train.mapf | sed -E 's/BBMK_PAR.([LR])([0-9])B[12]_([0-9]+)/MKIP\2P\1\3/ig' | sed -E 's/BBMK_HO([0-9])B[12]_0/MKIP\1/ig' | tail -n +9 > train-output/train.manf";
  system, "cat train.mapb | sed -E 's/BBMK_PAR.([LR])([0-9])B[12]_([0-9]+)/MKIP\2P\1\3/ig' | sed -E 's/BBMK_HO([0-9])B[12]_0/MKIP\1/ig' | tail -n +9 > train-output/train.manb";
  system, "cat train.optf | sed -E 's/BBMK_PAR.([LR])([0-9])B[12]_([0-9]+)/MKIP\2P\1\3/ig' | sed -E 's/BBMK_HO([0-9])B[12]_0/MKIP\1/ig' > train-output/train.optf";
  system, "cat train.optb | sed -E 's/BBMK_PAR.([LR])([0-9])B[12]_([0-9]+)/MKIP\2P\1\3/ig' | sed -E 's/BBMK_HO([0-9])B[12]_0/MKIP\1/ig' > train-output/train.optb";
  system, "cat train.surf | sed -E 's/BBMK_PAR.([LR])([0-9])B[12]_([0-9]+)/MKIP\2P\1\3/ig' | sed -E 's/BBMK_HO([0-9])B[12]_0/MKIP\1/ig' > train-output/train.surf";
  system, "cat train.surb | sed -E 's/BBMK_PAR.([LR])([0-9])B[12]_([0-9]+)/MKIP\2P\1\3/ig' | sed -E 's/BBMK_HO([0-9])B[12]_0/MKIP\1/ig' > train-output/train.surb";
  system, "rm train*b";
  system, "rm train*f";
	
	stop;
}

if (mylhcbeam==1) { use, sequence=lhcb1; } else { use, sequence=lhcb2; };

